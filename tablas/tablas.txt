-- Crear la tabla Usuarios
CREATE TABLE IF NOT EXISTS Usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo int DEFAULT 1
);

-- Crear la tabla Contraseña
CREATE TABLE IF NOT EXISTS Usuarios_Contrasena (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    hash_contraseña VARCHAR(255) NOT NULL,
    salt VARCHAR(50) NOT NULL,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int DEFAULT 1
);

-- Crear la tabla Historial_Contraseñas
CREATE TABLE IF NOT EXISTS Usuarios_Historial_Contrasenas (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    hash_contraseña VARCHAR(255) NOT NULL,
    salt VARCHAR(50) NOT NULL,
    fecha_uso TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crear la tabla Intento_Login
CREATE TABLE IF NOT EXISTS Usuarios_Login (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    fecha_intento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    exitoso BOOLEAN DEFAULT FALSE,
    direccion_ip VARCHAR(50),
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int DEFAULT 1
);

-- Crear la tabla Rol
CREATE TABLE IF NOT EXISTS Usuarios_Roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int DEFAULT 1
);

-- Crear la tabla Permiso
CREATE TABLE IF NOT EXISTS Usuarios_Permisos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int DEFAULT 1
);

-- Crear la tabla Rol_Permiso (relación N:M entre Rol y Permiso)
CREATE TABLE IF NOT EXISTS Usuarios_Roles_Permisos (
    roles_id INT REFERENCES Usuarios_Roles(id) ON DELETE CASCADE,
    permisos_id INT REFERENCES Usuarios_Permisos(id) ON DELETE CASCADE,
    PRIMARY KEY (roles_id, permisos_id)
);

-- Crear la tabla Usuarios_Rol (relación N:M entre Usuarios y Rol)
CREATE TABLE IF NOT EXISTS Usuarios_Roles_Usuarios (
    usuarios_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    roles_id INT REFERENCES Usuarios_Roles(id) ON DELETE CASCADE,
    PRIMARY KEY (usuarios_id, roles_id)
);

-- Crear la tabla Autenticacion_Dos_Factores (2FA)
CREATE TABLE IF NOT EXISTS Usuarios_Autenticacion_Dos_Factores (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    metodo VARCHAR(50) NOT NULL,
    codigo VARCHAR(10) NOT NULL,
    fecha_expiracion TIMESTAMP,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo int default 1
);

---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS config_rangos_edades (
    id int PRIMARY KEY,
    rango1 int default 0,
    rango2 int default 0,
	nombre varchar(50) NOT NULL default '',
	sexo int NOT NULL default 0,
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_key_values (
	opcion varchar(30) NOT NULL default '',
	key varchar(50) NOT NULL default '',
	value varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_razas (
    id SERIAL PRIMARY KEY,
	nombre varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_condiciones_corporales (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_tipos_explotacion (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_calidad_animal (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_color_animal (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS predios (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(100) DEFAULT '',
    area_hectareas FLOAT DEFAULT 0,
    tipo_sueldo VARCHAR(30) DEFAULT '',
    capacidad_maxima INT DEFAULT 0,
    observaciones TEXT DEFAULT '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1
);

CREATE TABLE IF NOT EXISTS potreros (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
    area_hectareas FLOAT DEFAULT 0,
    tipo_sueldo VARCHAR(30) DEFAULT '',
    capacidad_maxima INT DEFAULT 0,
    observaciones TEXT DEFAULT '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_potreros UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS config_parametros (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	descripcion TEXT NOT NULL default '',
	value_int int default 0,
	value_float float default 0,
	value_date TIMESTAMP,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_predios_parametros UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS sectores (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_sectores UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lotes (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_lotes UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS grupos (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_grupos UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS diagnosticos_veterinarios (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	tipo_diagnostico_key int not null default 0,
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_diagnosticos_veterinarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS motivos_ventas (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_motivos_ventas UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS causas_muerte (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_causas_muerte UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lugares_compras (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_lugares_compras UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lugares_ventas (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_lugares_ventas UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS imagenes (
    id SERIAL PRIMARY KEY, 
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
    nombre_archivo VARCHAR(255) NOT NULL,
    ruta_archivo TEXT NOT NULL, 
    tipo_mime VARCHAR(50) NOT NULL,
    tamano BIGINT NOT NULL,
    descripcion TEXT,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_imagenes UNIQUE(predio_id,nombre_archivo)
);

CREATE TABLE IF NOT EXISTS productos (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	tipo_producto_key int default 0,
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_productos UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS productos_imagenes (
    id SERIAL PRIMARY KEY,
	productos_id int not null REFERENCES productos(id) ON DELETE CASCADE,
	imagenes_id int not null REFERENCES imagenes(id) ON DELETE CASCADE,
	CONSTRAINT unique_productos_imagenes UNIQUE(productos_id,imagenes_id)
);

CREATE TABLE IF NOT EXISTS veterinarios (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE, 
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	telefono varchar(50) NOT NULL default '',
	email varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_predios_veterinarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS propietarios (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_predios_propietarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS hierros (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	imagen_id int int REFERENCES imagenes(id) ON DELETE CASCADE,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_predios_propietarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS animales (
    id SERIAL PRIMARY KEY,
    predio_id int REFERENCES predios(id) ON DELETE CASCADE,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
    fecha_nacimiento TIMESTAMP ,
    fecha_compra TIMESTAMP ,
    sexo_key smallint default 0, --macho, hembra
    tipo_ingreso_id smallint default 0, --nacimiento, compra
    madre_id int REFERENCES animales(id) ON DELETE CASCADE, 
    codigo_madre varchar(100) default '', --se utiliza cuando el animal es compra
    ind_transferencia_embriones smallint default 0,
    codigo_donadora varchar(100) default '', --se utiliza cuando se marca que es transferencia de embriones para asignar el codigo de la madre gnetica y usarla en el arbol genealogico 
    tipo_padre_key smallint default 0, --Monta, Inseminacion
    padre_id int REFERENCES animales(id) ON DELETE CASCADE,
    codigo_padre varchar(100) default '', --se utiliza cuando es compra y el padre no esta registrado. se usa en el arbol genealogico
    codigo_pajuela varchar(100) default '', -- se utiliza cuando es por inseminacion
    config_razas_id int  REFERENCES config_razas(id) ON DELETE CASCADE,
	config_condiciones_corporales int  REFERENCES config_condiciones_corporales(id) ON DELETE CASCADE,
	config_tipos_explotacion_id int  REFERENCES config_tipos_explotacion(id) ON DELETE CASCADE,
	config_calidad_animal_id int  REFERENCES config_calidad_animal(id) ON DELETE CASCADE,
	config_color_animal_id int  REFERENCES config_color_animal(id) ON DELETE CASCADE,
    potrero_id int  REFERENCES potreros(id) ON DELETE CASCADE, 
	sector_id int  REFERENCES sector(id) ON DELETE CASCADE, 
	lote_id int  REFERENCES lote(id) ON DELETE CASCADE, 
	grupo_id int  REFERENCES grupo(id) ON DELETE CASCADE, 
	lugares_compras int  REFERENCES lugares_compras(id) ON DELETE CASCADE, 
	lugares_ventas int  REFERENCES lugares_ventas(id) ON DELETE CASCADE,
	precio_compra float default 0,
	peso_compra float default 0,
	propietarios_id int  REFERENCES propietarios(id) ON DELETE CASCADE,
	hierros_id int  REFERENCES hierros(id) ON DELETE CASCADE,
	Codigo_RFID varchar(100) default '',
	Codigo_Arete varchar(100) default '',
	Codigo_QR varchar(100) default '',
	salud_animal_key int default 0,
	estado_animal_key int default 1,
	ind_descartado smallint default 0,
	ind_tatuado smallint default 0,
	ind_herrado smallint default 0,
	ind_descornado smallint default 0,
	asociacion_ganadera varchar(100) default '',
	asociacion_ganadera_cod_registro varchar(100) default '',
	asociacion_ganadera_fecha_registro TIMESTAMP,
	asociacion_ganadera_clasificacion varchar(100) default '',
	asociacion_ganadera_tipo varchar(100) default '',
	asociacion_ganadera_comentarios text default '',
	imagenes_id int not null REFERENCES imagenes(id) ON DELETE CASCADE,
	imagenes_hierro_id int not null REFERENCES imagenes(id) ON DELETE CASCADE,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT unique_animales UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS animales_imagenes (
    id SERIAL PRIMARY KEY,
	animales_id int not null REFERENCES animales(id) ON DELETE CASCADE,
	imagenes_id int not null REFERENCES imagenes(id) ON DELETE CASCADE,
	CONSTRAINT unique_animales_imagenes UNIQUE(animales_id,imagenes_id)
);

CREATE TABLE IF NOT EXISTS servicios_palpaciones (
    id SERIAL PRIMARY KEY,
	predio_id int REFERENCES predios(id) ON DELETE CASCADE,
	fecha TIMESTAMP not null,
	veterinarios_id int not null REFERENCES veterinarios(id) ON DELETE CASCADE,
	create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT unique_predios_propietarios UNIQUE(predio_id,codigo)
);

---insertar los registros config_rangos_edades-----
DELETE FROM config_rangos_edades;
INSERT INTO config_rangos_edades (id, rango1, rango2, nombre, sexo, activo) VALUES
(1, 1, 240, 'Ternero', 0, 1),
(2, 241, 365, 'Novillo destete', 0, 1),
(3, 366, 600, 'Novillo levante', 0, 1),
(4, 601, 1080, 'Novillo Ceba', 0, 1),
(5, 1081, 10000, 'Toro', 0, 1),
(6, 1, 240, 'Ternera', 1, 1),
(7, 241, 365, 'Novilla destete', 1, 1),
(8, 366, 600, 'Novilla lavante', 1, 1),
(9, 601, 1080, 'Novilla vientre', 1, 1),
(10, 1081, 10000, 'Vaca', 1, 1);

---insertar los registros config_key_values-----
DELETE FROM config_key_values;
INSERT INTO config_key_values (opcion,key,value,activo) VALUES
('sexo','Masculino','0',1),
('sexo','Femenino','1',1),
('tipo_producto','Reproduccion','0',1),
('tipo_producto','Antibiotico','1',1),
('tipo_producto','Vitaminas','2',1),
('salud_animal','Sano','0',1),
('salud_animal','Enfermo','1',1),
('estado_animal','Activo','0',1),
('estado_animal','Vendido','1',1),
('estado_animal','Muerto','2',1),
('tipo_padre','Monta','1',1),
('tipo_padre','Inseminacion','2',1),
('tipo_diagnostico','Reproductivo','0',1),
('tipo_diagnostico','Vitaminas','1',1);




