-- Crear la tabla Usuarios
CREATE TABLE IF NOT EXISTS Usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    activo BOOLEAN DEFAULT TRUE
);

-- Crear la tabla Contraseña
CREATE TABLE IF NOT EXISTS Usuarios_Contrasena (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    hash_contraseña VARCHAR(255) NOT NULL,
    salt VARCHAR(50) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_expiracion TIMESTAMP
);

-- Crear la tabla Historial_Contraseñas
CREATE TABLE IF NOT EXISTS Usuarios_Historial_Contrasenas (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    hash_contraseña VARCHAR(255) NOT NULL,
    salt VARCHAR(50) NOT NULL,
    fecha_uso TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Crear la tabla Intento_Login
CREATE TABLE IF NOT EXISTS Usuarios_Login (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    fecha_intento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    exitoso BOOLEAN DEFAULT FALSE,
    direccion_ip VARCHAR(50)
);

-- Crear la tabla Rol
CREATE TABLE IF NOT EXISTS Usuarios_Roles (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(50) UNIQUE NOT NULL
);

-- Crear la tabla Permiso
CREATE TABLE IF NOT EXISTS Usuarios_Permisos (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(100) UNIQUE NOT NULL
);

-- Crear la tabla Rol_Permiso (relación N:M entre Rol y Permiso)
CREATE TABLE IF NOT EXISTS Usuarios_Roles_Permisos (
    rol_id INT REFERENCES Usuarios_Roles(id) ON DELETE CASCADE,
    permiso_id INT REFERENCES Usuarios_Permisos(id) ON DELETE CASCADE,
    PRIMARY KEY (rol_id, permiso_id)
);

-- Crear la tabla Usuarios_Rol (relación N:M entre Usuarios y Rol)
CREATE TABLE IF NOT EXISTS Usuarios_Roles_Usuarios (
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    rol_id INT REFERENCES Usuarios_Roles(id) ON DELETE CASCADE,
    PRIMARY KEY (Usuario_id, rol_id)
);

-- Crear la tabla Autenticacion_Dos_Factores (2FA)
CREATE TABLE IF NOT EXISTS Usuarios_Autenticacion_Dos_Factores (
    id SERIAL PRIMARY KEY,
    Usuario_id INT REFERENCES Usuarios(id) ON DELETE CASCADE,
    metodo VARCHAR(50) NOT NULL,
    codigo VARCHAR(10) NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_expiracion TIMESTAMP,
    activo int default 1
);

CREATE TABLE IF NOT EXISTS predios (
    id SERIAL PRIMARY KEY,
    codigo VARCHAR(20) NOT NULL UNIQUE,
    nombre VARCHAR(100) DEFAULT '',
    area_hectareas FLOAT DEFAULT 0,
    tipo_sueldo VARCHAR(30) DEFAULT '',
    capacidad_maxima INT DEFAULT 0,
    observaciones TEXT DEFAULT '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS potreros (
    id SERIAL PRIMARY KEY,
	predio_id int,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
    area_hectareas FLOAT DEFAULT 0,
    tipo_sueldo VARCHAR(30) DEFAULT '',
    capacidad_maxima INT DEFAULT 0,
    observaciones TEXT DEFAULT '',
	fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT fk_predios_potreros FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_potreros UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS sectores (
    id SERIAL PRIMARY KEY,
	predio_id int,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	activo int default 1,
	CONSTRAINT fk_predios_sectores FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_sectores UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lotes (
    id SERIAL PRIMARY KEY,
	predio_id int,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	activo int default 1,
	CONSTRAINT fk_predios_lotes FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_lotes UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS grupos (
    id SERIAL PRIMARY KEY,
	predio_id int,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
	activo int default 1,
	CONSTRAINT fk_predios_grupos FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_grupos UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS diagnosticos_veterinarios (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	tipo_diagnostico int not null default 0,
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_diagnosticos_veterinarios FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_diagnosticos_veterinarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS motivos_ventas (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_motivos_ventas FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_motivos_ventas UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS causas_muerte (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_causas_muerte FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_causas_muerte UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lugares_compras (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_lugares_compras FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_lugares_compras UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS lugares_ventas (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_lugares_ventas FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_lugares_ventas UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS imagenes (
    id SERIAL PRIMARY KEY, 
	predio_id int,
    nombre_archivo VARCHAR(255) NOT NULL,
    ruta_archivo TEXT NOT NULL, 
    tipo_mime VARCHAR(50) NOT NULL,
    tamano BIGINT NOT NULL,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    descripcion TEXT,
	CONSTRAINT fk_predios_imagenes FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_imagenes UNIQUE(predio_id,nombre_archivo)
);

CREATE TABLE IF NOT EXISTS productos (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	tipo_producto int default 0,
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_productos FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_productos UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS productos_imagenes (
    id SERIAL PRIMARY KEY,
	producto_id int not null,
	id_imagen int not null,
	CONSTRAINT fk_productos_imagenes1 FOREIGN KEY (producto_id) REFERENCES productos(id),
	CONSTRAINT fk_productos_imagenes2 FOREIGN KEY (id_imagen) REFERENCES imagenes(id),
	CONSTRAINT unique_productos_imagenes UNIQUE(producto_id,id_imagen)
);

CREATE TABLE IF NOT EXISTS veterinarios (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	telefono varchar(50) NOT NULL default '',
	email varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1,
	CONSTRAINT fk_predios_lugares_ventas FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_predios_veterinarios UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS config_parametros (
    id SERIAL PRIMARY KEY,
	predio_id int,
	codigo VARCHAR(20) NOT NULL,
	nombre varchar(50) NOT NULL default '',
	descripcion TEXT NOT NULL default '',
	value_int int default 0,
	value_float float default 0,
	value_date TIMESTAMP,
	activo int default 1,
	CONSTRAINT fk_predios_parametros FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_predios_parametros UNIQUE(predio_id,codigo)
);

CREATE TABLE IF NOT EXISTS config_rangos_edades (
    id int PRIMARY KEY,
    rango1 int default 0,
    rango2 int default 0,
	nombre varchar(50) NOT NULL default '',
	sexo int NOT NULL default 0,
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_key_values (
	opcion varchar(30) NOT NULL default '',
	key varchar(50) NOT NULL default '',
	value varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_razas (
    id SERIAL PRIMARY KEY,
	nombre varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_condiciones_corporales (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_tipos_explotacion (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_calidad_animal (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	comentarios text default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS config_color_animal (
    id SERIAL PRIMARY KEY,
	codigo VARCHAR(20) NOT NULL UNIQUE,
	nombre varchar(50) NOT NULL default '',
	activo int default 1
);

CREATE TABLE IF NOT EXISTS animales (
    id SERIAL PRIMARY KEY,
    predio_id int,
    codigo VARCHAR(20) NOT NULL,
    nombre VARCHAR(100) DEFAULT '',
    fecha_nacimiento TIMESTAMP ,
    fecha_compra TIMESTAMP ,
    sexo_id smallint default 0, --macho, hembra
    tipo_ingreso_id smallint default 0, --nacimiento, compra
    madre_id int REFERENCES animales(id) ON DELETE CASCADE, 
    codigo_madre varchar(100) default '', --se utiliza cuando el animal es compra
    ind_transferencia_embriones smallint default 0,
    codigo_donadora varchar(100) default '', --se utiliza cuando se marca que es transferencia de embriones para asignar el codigo de la madre gnetica y usarla en el arbol genealogico 
    tipo_padre_id smallint default 0, --Monta, Inseminacion
    padre_id int REFERENCES animales(id) ON DELETE CASCADE,
    codigo_padre varchar(100) default '', --se utiliza cuando es compra y el padre no esta registrado. se usa en el arbol genealogico
    codigo_pajuela varchar(100) default '', -- se utiliza cuando es por inseminacion
    raza_id int  REFERENCES config_razas(id) ON DELETE CASCADE,
    
    capacidad_maxima INT DEFAULT 0,
    observaciones TEXT DEFAULT '',
	fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	activo int default 1,
	CONSTRAINT fk_predios_potreros FOREIGN KEY (predio_id) REFERENCES predios(id),
	CONSTRAINT unique_potreros UNIQUE(predio_id,codigo)
);

---insertar los registros config_rangos_edades-----
DELETE FROM config_rangos_edades;
INSERT INTO config_rangos_edades (id, rango1, rango2, nombre, sexo, activo) VALUES
(1, 1, 240, 'Ternero', 0, 1),
(2, 241, 365, 'Novillo destete', 0, 1),
(3, 366, 600, 'Novillo levante', 0, 1),
(4, 601, 1080, 'Novillo Ceba', 0, 1),
(5, 1081, 10000, 'Toro', 0, 1),
(6, 1, 240, 'Ternera', 1, 1),
(7, 241, 365, 'Novilla destete', 1, 1),
(8, 366, 600, 'Novilla lavante', 1, 1),
(9, 601, 1080, 'Novilla vientre', 1, 1),
(10, 1081, 10000, 'Vaca', 1, 1);

---insertar los registros config_key_values-----
DELETE FROM config_key_values;
INSERT INTO config_key_values (opcion,key,value,activo) VALUES
('sexo','Masculino','0',1),
('sexo','Femenino','1',1),
('tipo_producto','Reproduccion','0',1),
('tipo_producto','Antibiotico','1',1),
('tipo_producto','Vitaminas','2',1)

